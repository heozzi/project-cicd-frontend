name: React CI/CD

# 트리거 : PUSH, PR(pull request) 이벤트 발생시 작동, 브런치는 main(없으면  master)
# 만약, 프런트, 백엔드 통합 => 특정 디렉토리가 업데이트 될때 반영해라 등 세부 조건 추가 가능
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# 해야할일
jobs:
  react-deploy:
    runs-on: ubuntu-latest
    steps:
      # 체크아웃 -> github의 저장소로부터 소스 체크아웃
      - name: Checkout repository resource
        uses: actions/checkout@v2

      # 환경변수 동적 생성 -> .env 파일 생성(ec2 정보 세팅), 기존코드 수정(보안)
      - name: .env 환경 변수 동적 생성
        run: |
          echo "${{ secrets.CLIENT_ENV }}" > .env
          pwd
          ls -al

      # 빌드를 위한 조건 -> nodejs 설치
      - name: node.js 설치
        uses: actions/setup-node@v2
        with:
          node-version: 22

      # npm install 라이브러리 설치
      - name: node.js 테스트
        run:  npm install
      

      # 빌드
      # run: npm run build
      - name: 빌드
        run: npm run build

      # 빌드의 결과물을 ec2 업로드
      # 대상 : ./build/*
      # 타겟 : /home/ubuntu/client
      # 대상위치에 존재하는 모든 리소스 -> EC2의 ~/cline 하위에 복사하기
      - name: 빌드의 결과물을 ec2에 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ./build/*
          target: /home/ubuntu/client

      # 뒷정리(업로드 결과 -> ngnix의 root로 이동(설정) 디렉토리 정리)
      # EC 접속(지난주 참고)
      # /var/www/html/* 삭제 처리
      # /var/www/html/*  하위로 카피
      # nginix 재가동(systemctl restart nginx)
      - name: SSH로 EC2에 접속후 서버가동
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            sudo rm -rf /var/www/html/*
            sudo mv /home/ubuntu/client/build/* /var/www/html/ 
            sudo systemctl restart nginx
            rm -rf /home/ubuntu/client